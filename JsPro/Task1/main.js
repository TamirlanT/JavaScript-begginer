
/* 
Задание 1
• Используя Symbol.iterator, создайте объект "Музыкальная коллекция", который 
можно итерировать. Каждая итерация должна возвращать следующий альбом 
из коллекции.

• Создайте объект musicCollection, который содержит массив альбомов и имеет 
свойство-символ Symbol.iterator. Каждый альбом имеет следующую структуру:

{
title: "Название альбома",
artist: "Исполнитель",
year: "Год выпуска"
}

• Реализуйте кастомный итератор для объекта musicCollection. 
Итератор должен перебирать альбомы по порядку.
• Используйте цикл for...of для перебора альбомов в музыкальной коллекции
 и вывода их на консоль в формате: Название альбома - Исполнитель (Год выпуска)
*/

const musicCollection = {
    albums: [
        {
            tittle: 'Album-1',
            artist: 'artist-1',
            year: '2022'
        },
        {
            tittle: 'Album-2',
            artist: 'artist-2',
            year: '2021'
        }, {
            tittle: 'Album-3',
            artist: 'artist-3',
            year: '2023'
        }
    ],
    current: 0,


    [Symbol.iterator]() {
        return this;
    },
    next() {
        return this.current <= this.albums.length ? { done: false, value: this.albums[this.current++] } : { done: true }
    }
}

// musicCollection[Symbol.iterator] = function () {
//     return {
//         current: this.current,
//         albums: this.albums,

//         next() {
//             return this.current <= this.albums.length ? { done: false, value: this.albums[this.current++] } : { done: true }
//         }
//     }
// };

for (let album of musicCollection) {
    console.log(`Album: ${album.tittle}, Artist:${album.artist}, Year: ${album.year}`);
    // console.log(album.tittle, '-', album.artist, '-', album.year);
}




/*
Задание 2
Вы управляете рестораном, в котором работают разные повара, специализирующиеся на определенных блюдах. Клиенты приходят и делают заказы на разные блюда.

Необходимо создать систему управления этими заказами, которая позволит:

• Отслеживать, какой повар готовит какое блюдо.
• Записывать, какие блюда заказал каждый клиент.

Используйте коллекции Map для хранения блюд и их поваров, а также для хранения заказов каждого клиента. В качестве ключей для клиентов используйте объекты.

Повара и их специализации:

Виктор - специализация: Пицца.
Ольга - специализация: Суши.
Дмитрий - специализация: Десерты.

Блюда и их повара:

Пицца "Маргарита" - повар: Виктор.
Пицца "Пепперони" - повар: Виктор.
Суши "Филадельфия" - повар: Ольга.
Суши "Калифорния" - повар: Ольга.
Тирамису - повар: Дмитрий.
Чизкейк - повар: Дмитрий.

Заказы:

Клиент Алексей заказал: Пиццу "Пепперони" и Тирамису.
Клиент Мария заказала: Суши "Калифорния" и Пиццу "Маргарита".
Клиент Ирина заказала: Чизкейк.
*/

// • Отслеживать, какой повар готовит какое блюдо.

const chefsSpecializationMap = new Map([
    ['Виктор', 'Пицца'],
    ['Ольга', 'Суши'],
    ['Дмитрий', 'Десерты']
])

const chefsDishesMap = new Map([
    ['Пицца "Маргарита"', 'Виктор'],
    ['Пицца "Пепперони"', 'Виктор'],
    ['Суши "Филадельфия"', 'Ольга'],
    ['Суши "Калифорния"', 'Ольга'],
    ['Тирамису', 'Дмитрий'],
    ['Чизкейк', 'Дмитрий']
])
// • Записывать, какие блюда заказал каждый клиент.

// Создание клиета
function Client(name) {
    this.name = name;
}

const orderMap = new Map();

// Добавление заказа
function addOrder(client, dishes) {
    orderMap.set(client, dishes)
}

// создание объектов клиентов и добавление их заказов

// Клиент Алексей заказал: Пиццу "Пепперони" и Тирамису.
// Клиент Мария заказала: Суши "Калифорния" и Пиццу "Маргарита".
// Клиент Ирина заказала: Чизкейк.



const alexey = new Client('Алексей')
addOrder(alexey, ['Пицца "Пепперони"', 'Тирамису'])

const maria = new Client('Мария')
addOrder(maria, ['Суши "Калифорния"', 'Пицца "Маргарита"'])

const irina = new Client('Ирина')
addOrder(irina, ['Чизкейк'])

//Функция вывода информации о заказах и поварах

function displayOrders() {
    for (let [client, dishes] of orderMap) {
        console.log(`Клиент ${client.name} заказал:`);
        for (let dish of dishes) {
            const chef = chefsDishesMap.get(dish)
            console.log(`${dish} - ${chef}`);
        }
    }
}

displayOrders();